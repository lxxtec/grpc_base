// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: echo.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EchoServiceClient is the client API for EchoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EchoServiceClient interface {
	GetUnaryEcho(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	GetCStreamEcho(ctx context.Context, opts ...grpc.CallOption) (EchoService_GetCStreamEchoClient, error)
	GetSStreamEcho(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (EchoService_GetSStreamEchoClient, error)
	GetBIStreamEcho(ctx context.Context, opts ...grpc.CallOption) (EchoService_GetBIStreamEchoClient, error)
}

type echoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEchoServiceClient(cc grpc.ClientConnInterface) EchoServiceClient {
	return &echoServiceClient{cc}
}

func (c *echoServiceClient) GetUnaryEcho(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, "/EchoService/GetUnaryEcho", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) GetCStreamEcho(ctx context.Context, opts ...grpc.CallOption) (EchoService_GetCStreamEchoClient, error) {
	stream, err := c.cc.NewStream(ctx, &EchoService_ServiceDesc.Streams[0], "/EchoService/GetCStreamEcho", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoServiceGetCStreamEchoClient{stream}
	return x, nil
}

type EchoService_GetCStreamEchoClient interface {
	Send(*EchoRequest) error
	CloseAndRecv() (*EchoResponse, error)
	grpc.ClientStream
}

type echoServiceGetCStreamEchoClient struct {
	grpc.ClientStream
}

func (x *echoServiceGetCStreamEchoClient) Send(m *EchoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *echoServiceGetCStreamEchoClient) CloseAndRecv() (*EchoResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *echoServiceClient) GetSStreamEcho(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (EchoService_GetSStreamEchoClient, error) {
	stream, err := c.cc.NewStream(ctx, &EchoService_ServiceDesc.Streams[1], "/EchoService/GetSStreamEcho", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoServiceGetSStreamEchoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EchoService_GetSStreamEchoClient interface {
	Recv() (*EchoResponse, error)
	grpc.ClientStream
}

type echoServiceGetSStreamEchoClient struct {
	grpc.ClientStream
}

func (x *echoServiceGetSStreamEchoClient) Recv() (*EchoResponse, error) {
	m := new(EchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *echoServiceClient) GetBIStreamEcho(ctx context.Context, opts ...grpc.CallOption) (EchoService_GetBIStreamEchoClient, error) {
	stream, err := c.cc.NewStream(ctx, &EchoService_ServiceDesc.Streams[2], "/EchoService/GetBIStreamEcho", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoServiceGetBIStreamEchoClient{stream}
	return x, nil
}

type EchoService_GetBIStreamEchoClient interface {
	Send(*EchoRequest) error
	Recv() (*EchoResponse, error)
	grpc.ClientStream
}

type echoServiceGetBIStreamEchoClient struct {
	grpc.ClientStream
}

func (x *echoServiceGetBIStreamEchoClient) Send(m *EchoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *echoServiceGetBIStreamEchoClient) Recv() (*EchoResponse, error) {
	m := new(EchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EchoServiceServer is the server API for EchoService service.
// All implementations must embed UnimplementedEchoServiceServer
// for forward compatibility
type EchoServiceServer interface {
	GetUnaryEcho(context.Context, *EchoRequest) (*EchoResponse, error)
	GetCStreamEcho(EchoService_GetCStreamEchoServer) error
	GetSStreamEcho(*EchoRequest, EchoService_GetSStreamEchoServer) error
	GetBIStreamEcho(EchoService_GetBIStreamEchoServer) error
	mustEmbedUnimplementedEchoServiceServer()
}

// UnimplementedEchoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEchoServiceServer struct {
}

func (UnimplementedEchoServiceServer) GetUnaryEcho(context.Context, *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnaryEcho not implemented")
}
func (UnimplementedEchoServiceServer) GetCStreamEcho(EchoService_GetCStreamEchoServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCStreamEcho not implemented")
}
func (UnimplementedEchoServiceServer) GetSStreamEcho(*EchoRequest, EchoService_GetSStreamEchoServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSStreamEcho not implemented")
}
func (UnimplementedEchoServiceServer) GetBIStreamEcho(EchoService_GetBIStreamEchoServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBIStreamEcho not implemented")
}
func (UnimplementedEchoServiceServer) mustEmbedUnimplementedEchoServiceServer() {}

// UnsafeEchoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EchoServiceServer will
// result in compilation errors.
type UnsafeEchoServiceServer interface {
	mustEmbedUnimplementedEchoServiceServer()
}

func RegisterEchoServiceServer(s grpc.ServiceRegistrar, srv EchoServiceServer) {
	s.RegisterService(&EchoService_ServiceDesc, srv)
}

func _EchoService_GetUnaryEcho_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).GetUnaryEcho(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EchoService/GetUnaryEcho",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).GetUnaryEcho(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_GetCStreamEcho_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoServiceServer).GetCStreamEcho(&echoServiceGetCStreamEchoServer{stream})
}

type EchoService_GetCStreamEchoServer interface {
	SendAndClose(*EchoResponse) error
	Recv() (*EchoRequest, error)
	grpc.ServerStream
}

type echoServiceGetCStreamEchoServer struct {
	grpc.ServerStream
}

func (x *echoServiceGetCStreamEchoServer) SendAndClose(m *EchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *echoServiceGetCStreamEchoServer) Recv() (*EchoRequest, error) {
	m := new(EchoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _EchoService_GetSStreamEcho_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EchoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EchoServiceServer).GetSStreamEcho(m, &echoServiceGetSStreamEchoServer{stream})
}

type EchoService_GetSStreamEchoServer interface {
	Send(*EchoResponse) error
	grpc.ServerStream
}

type echoServiceGetSStreamEchoServer struct {
	grpc.ServerStream
}

func (x *echoServiceGetSStreamEchoServer) Send(m *EchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EchoService_GetBIStreamEcho_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoServiceServer).GetBIStreamEcho(&echoServiceGetBIStreamEchoServer{stream})
}

type EchoService_GetBIStreamEchoServer interface {
	Send(*EchoResponse) error
	Recv() (*EchoRequest, error)
	grpc.ServerStream
}

type echoServiceGetBIStreamEchoServer struct {
	grpc.ServerStream
}

func (x *echoServiceGetBIStreamEchoServer) Send(m *EchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *echoServiceGetBIStreamEchoServer) Recv() (*EchoRequest, error) {
	m := new(EchoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EchoService_ServiceDesc is the grpc.ServiceDesc for EchoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EchoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EchoService",
	HandlerType: (*EchoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUnaryEcho",
			Handler:    _EchoService_GetUnaryEcho_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCStreamEcho",
			Handler:       _EchoService_GetCStreamEcho_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetSStreamEcho",
			Handler:       _EchoService_GetSStreamEcho_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetBIStreamEcho",
			Handler:       _EchoService_GetBIStreamEcho_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "echo.proto",
}
